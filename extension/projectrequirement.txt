AWS Console Navigator - Project Requirements
1. Project Overview
1.1 Purpose
A Chrome extension that acts as an intelligent assistant to guide users through the AWS Console by providing visual navigation cues based on natural language input describing their goals.

1.2 Target Users
AWS beginners learning cloud infrastructure
Developers building on AWS who need guidance
Teams onboarding new members to AWS
Anyone who finds the AWS Console overwhelming
2. Core Features
2.1 Natural Language Input
User Story: As a user, I want to describe what I want to build in plain English so that I don't need to know AWS terminology
Requirements:
Text input field accessible from extension popup or sidebar
Support for queries like:
"I want to deploy a web application"
"Set up a database for my app"
"Create a serverless API"
Input validation and clarification prompts when goals are ambiguous
2.2 Goal Understanding & Step Generation
User Story: As a user, I want the system to understand my goal and break it down into actionable steps
Requirements:
Parse user intent from natural language
Map user goals to specific AWS services and configurations
Generate step-by-step navigation path through AWS Console
Handle common AWS workflows:
EC2 instance setup
S3 bucket creation and configuration
RDS database deployment
Lambda function creation
IAM role/policy management
VPC networking setup
CloudFormation stack deployment
2.3 Visual Navigation Cues
User Story: As a user, I want clear visual indicators showing where to click next
Requirements:
Display visual overlays on AWS Console pages:
Red circles/highlights on clickable elements
Arrows pointing to specific UI elements
Numbered sequence indicators for multi-step actions
Cue types:
Primary action cue (what to click next)
Secondary information cue (what to fill in)
Warning cue (important considerations)
Smooth animations when cues appear/disappear
Non-intrusive design that doesn't block console functionality
2.4 Step Navigation
User Story: As a user, I want to progress through steps at my own pace
Requirements:
"Next" button to advance to next step
"Previous" button to go back
"Skip step" option with confirmation
Progress indicator showing current step (e.g., "Step 3 of 7")
Ability to pause and resume guidance
Auto-detection when user completes a step
3. Technical Requirements
3.1 Chrome Extension Architecture
Manifest V3 compliance
Components needed:
Popup UI: Quick access, input field, goal selection
Content Script: DOM manipulation for visual cues, page detection
Background Service Worker: State management, API calls
Side Panel (optional): Persistent guidance panel
3.2 AWS Console Integration
Detect current AWS Console page/service
Parse AWS Console DOM structure
Handle AWS Console's dynamic content loading
Support for multiple AWS regions
Compatibility with AWS Console updates
3.3 Intelligence Layer
Option A: Local rule-based system
Predefined workflows for common tasks
Pattern matching for user input
Faster, no external dependencies
Option B: AI-powered (LLM integration)
Integration with OpenAI, Anthropic, or AWS Bedrock
Dynamic step generation
Better handling of complex/novel scenarios
Requires API key management
Recommended: Hybrid approach with fallback
3.4 Data Storage
Chrome Storage API for:
User preferences
Workflow progress/state
Common goals/templates
Usage analytics (optional)
3.5 Security & Privacy
No AWS credentials stored in extension
No interception of AWS API calls
User consent for data collection
Read-only observation of console interactions
Clear privacy policy
4. User Interface Requirements
4.1 Extension Popup
Clean, minimal interface
Input field with placeholder examples
Quick access to popular goals/templates
Settings/preferences access
Help/documentation link
4.2 In-Console Overlay
Semi-transparent guide panel
Contextual help text for each step
Clear typography and contrast
Responsive to window resizing
Dismissible but easily re-activated
4.3 Visual Cues Specifications
Primary cue: Red circle, 40px diameter, pulsing animation
Text annotations: Tooltips with brief instructions
Highlight effect: Subtle glow around target elements
Z-index management: Always on top but dismissible
5. Functional Workflows
5.1 Example Workflow: "Deploy a Static Website"
User inputs: "I want to host a static website"
System generates steps:
Navigate to S3
Create bucket
Configure bucket for static hosting
Set bucket policy for public access
Upload files
Note the website endpoint
Extension shows cue on "Services" menu
User clicks → cue moves to "S3"
User clicks → cue highlights "Create bucket"
Continue through all steps with visual guidance
5.2 Error Handling
Detect when user navigates away from expected path
Offer to recalculate steps or return to path
Timeout handling for steps not completed
Graceful degradation when AWS Console changes
6. Success Metrics
6.1 User Experience
Time to complete common tasks (vs. without extension)
User satisfaction score
Completion rate of guided workflows
Number of support requests/confusion points
6.2 Technical Performance
Extension load time < 1 second
Cue rendering latency < 200ms
Memory usage < 50MB
No conflicts with AWS Console functionality
7. Future Enhancements (v2.0+)
Multi-service workflows (e.g., "Deploy full-stack app")
Video tutorials integrated with guidance
Community-contributed workflow templates
Integration with AWS documentation
Voice input support
Customizable visual cue styles
Export workflow as infrastructure-as-code
Chrome to Firefox/Edge port
8. Development Phases
Phase 1: MVP (4-6 weeks)
Basic extension structure
3-5 common workflows (S3, EC2, Lambda basics)
Simple visual cues
Text input with keyword matching
Phase 2: Enhanced Intelligence (4-6 weeks)
More workflows (10-15 total)
Improved goal understanding
Better visual design
Progress persistence
Phase 3: AI Integration 
LLM integration for dynamic workflows
Natural language understanding
Complex multi-service guidance
Phase 4: Polish & Scale
User testing and feedback integration
Performance optimization
Documentation and tutorials
Public release preparation
9. Technical Stack Recommendations
Frontend: React or Vanilla JS (for performance)
Styling: Tailwind CSS or CSS-in-JS
State Management: Zustand or Redux
AI Integration: OpenAI API or Anthropic Claude API
Build Tools: Vite or Webpack
Testing: Jest, Playwright for E2E
10. Open Questions & Decisions Needed
Which AI provider for intelligence layer?
Freemium vs. paid model for AI features?
Telemetry collection approach?
Support for AWS GovCloud or China regions?
Offline capability for basic workflows?
Browser compatibility beyond Chrome?
